static class Item%name% extends Item
{
    private Block[] blocksEffectiveAgainst = new Block[]
	                {
	                    %blocks%
                };

                //harvest level
                int harvest = %harvest%;

    protected float efficiencyOnProperMaterial;

    protected Item%name%()
    {
        efficiencyOnProperMaterial = %ucinkovitost%;
        setMaxDamage(%uses%);
        setMaxStackSize(1);
        this.setCreativeTab(CreativeTabs.TOOLS);
    }


    @Override
    public float getStrVsBlock(ItemStack par1ItemStack, IBlockState par2Block)
    {
        for (int i = 0; i < blocksEffectiveAgainst.length; i++)
        {
            if (blocksEffectiveAgainst[i] == par2Block.getBlock())
            {
                return efficiencyOnProperMaterial;
            }
        }

        return 0.0F;
    }

    /**
     * Current implementations of this method in child classes do not use the entry argument beside ev. They just raise
     * the damage on the stack.
     */
    public boolean hitEntity(ItemStack par1ItemStack, EntityLivingBase par2EntityLiving, EntityLivingBase par3EntityLiving)
    {
        par1ItemStack.damageItem(2, par3EntityLiving);
        return true;
    }

    public boolean onBlockDestroyed(ItemStack par1ItemStack, World par2World, Block par3, int par4, int par5, int par6, EntityLivingBase par7EntityLiving){
		    par1ItemStack.damageItem(1, par7EntityLiving);
		    return true;
		}

    /**
     * Returns True is the item is renderer in full 3D when hold.
     */
    public boolean isFull3D()
    {
        return true;
    }

    /**
     * Return the enchantability factor of the item, most of the time is based on material.
     */
    public int getItemEnchantability()
    {
		//kok se lohk cara
        return %enta%;
    }

    %txf%
}
